// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	mysql "github.com/go-sql-driver/mysql"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson53317d9eDecodeModels(in *jlexer.Lexer, out *ScProductAndRelease) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "product_name":
			out.ProductName = string(in.String())
		case "vendor_name":
			out.VendorName = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "product_description":
			out.ProductDescription = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "icon_url":
			out.IconURL = string(in.String())
		case "download_url":
			out.DownloadURL = string(in.String())
		case "package_size":
			out.PackageSize = uint(in.Uint())
		case "package_type":
			out.PackageType = int8(in.Int8())
		case "release_date":
			easyjson53317d9eDecodeGithubComGoSqlDriverMysql(in, &out.ReleaseDate)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson53317d9eEncodeModels(out *jwriter.Writer, in ScProductAndRelease) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.Uint(uint(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"product_name\":")
	out.String(string(in.ProductName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"vendor_name\":")
	out.String(string(in.VendorName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"product_description\":")
	out.String(string(in.ProductDescription))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"version\":")
	out.String(string(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"icon_url\":")
	out.String(string(in.IconURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"download_url\":")
	out.String(string(in.DownloadURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"package_size\":")
	out.Uint(uint(in.PackageSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"package_type\":")
	out.Int8(int8(in.PackageType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"release_date\":")
	easyjson53317d9eEncodeGithubComGoSqlDriverMysql(out, in.ReleaseDate)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScProductAndRelease) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson53317d9eEncodeModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScProductAndRelease) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson53317d9eEncodeModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScProductAndRelease) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson53317d9eDecodeModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScProductAndRelease) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson53317d9eDecodeModels(l, v)
}
func easyjson53317d9eDecodeGithubComGoSqlDriverMysql(in *jlexer.Lexer, out *mysql.NullTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson53317d9eEncodeGithubComGoSqlDriverMysql(out *jwriter.Writer, in mysql.NullTime) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Time\":")
	out.Raw((in.Time).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Valid\":")
	out.Bool(bool(in.Valid))
	out.RawByte('}')
}

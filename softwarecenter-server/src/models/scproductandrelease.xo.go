// Package models contains the types for schema 'emind_software_center'.
package models

import "github.com/go-sql-driver/mysql"

// GENERATED BY XO. DO NOT EDIT.

// ScProductAndRelease represents a row from 'emind_software_center.sc_product_and_release'.
type ScProductAndRelease struct {
	ID                 uint           `json:"ID" form:"ID"`                                   // ID
	ProductName        string         `json:"product_name" form:"product_name"`               // product_name
	VendorName         string         `json:"vendor_name" form:"vendor_name"`                 // vendor_name
	URL                string         `json:"url" form:"url"`                                 // url
	ProductDescription string         `json:"product_description" form:"product_description"` // product_description
	Version            string         `json:"version" form:"version"`                         // version
	IconURL            string         `json:"icon_url" form:"icon_url"`                       // icon_url
	DownloadURL        string         `json:"download_url" form:"download_url"`               // download_url
	PackageSize        uint           `json:"package_size" form:"package_size"`               // package_size
	PackageType        int8           `json:"package_type" form:"package_type"`               // package_type
	ReleaseDate        mysql.NullTime `json:"release_date" form:"release_date"`               // release_date
}

// GetScProductAndReleases runs a custom query, returning results as ScProductAndRelease.
func GetScProductAndReleases(db XODB) ([]*ScProductAndRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`sc_product.ID, ` +
		`sc_product.product_name, ` +
		`sc_product.vendor_name, ` +
		`sc_product.url, ` +
		`sc_product.product_description, ` +
		`sc_release.version, ` +
		`sc_release.icon_url, ` +
		`sc_release.download_url, ` +
		`sc_release.package_size, ` +
		`sc_release.package_type, ` +
		`sc_release.release_date ` +
		`FROM sc_product INNER JOIN sc_release ` +
		`WHERE sc_product.ID = sc_release.ID`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScProductAndRelease{}
	for q.Next() {
		spar := ScProductAndRelease{}

		// scan
		err = q.Scan(&spar.ID, &spar.ProductName, &spar.VendorName, &spar.URL, &spar.ProductDescription, &spar.Version, &spar.IconURL, &spar.DownloadURL, &spar.PackageSize, &spar.PackageType, &spar.ReleaseDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &spar)
	}

	return res, nil
}

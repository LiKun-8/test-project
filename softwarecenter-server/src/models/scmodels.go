// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Insert inserts the ScRelease to the database.
func (sr *ScRelease) AddRelaseAndUpdateProduct(db *sql.DB) error {
	var err error

	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_release (` +
		`product_ID, version, icon_url, download_url, changelog, package_size, package_type, release_grade, grade_count, release_date` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	const sqlstr2 = `UPDATE emind_software_center.sc_product SET ` +
		`release_ID = ?, icon_url = ?` +
		` WHERE ID = ?`

	tx, err := db.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()
	// run query
	XOLog(sqlstr, sr.ProductID, sr.Version, sr.IconURL, sr.DownloadURL, sr.Changelog, sr.PackageSize, sr.PackageType, sr.ReleaseGrade, sr.GradeCount, sr.ReleaseDate)
	res, err := tx.Exec(sqlstr, sr.ProductID, sr.Version, sr.IconURL, sr.DownloadURL, sr.Changelog, sr.PackageSize, sr.PackageType, sr.ReleaseGrade, sr.GradeCount, sr.ReleaseDate)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// run query
	XOLog(sqlstr2, id, sr.IconURL, sr.ProductID)
	_, err = tx.Exec(sqlstr2, id, sr.IconURL, sr.ProductID)
	if err != nil {
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	// set primary key and existence
	sr.ID = uint(id)
	sr._exists = true

	return nil
}

// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// ScRelease represents a row from 'emind_software_center.sc_release'.
type ScRelease struct {
	ID           uint           `json:"ID" form:"ID"`                       // ID
	ProductID    uint           `json:"product_ID" form:"product_ID"`       // product_ID
	Version      string         `json:"version" form:"version"`             // version
	IconURL      string         `json:"icon_url" form:"icon_url"`           // icon_url
	DownloadURL  string         `json:"download_url" form:"download_url"`   // download_url
	Changelog    string         `json:"changelog" form:"changelog"`         // changelog
	PackageSize  uint           `json:"package_size" form:"package_size"`   // package_size
	PackageType  int8           `json:"package_type" form:"package_type"`   // package_type
	ReleaseGrade uint           `json:"release_grade" form:"release_grade"` // release_grade
	GradeCount   uint           `json:"grade_count" form:"grade_count"`     // grade_count
	ReleaseDate  mysql.NullTime `json:"release_date" form:"release_date"`   // release_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ScRelease exists in the database.
func (sr *ScRelease) Exists() bool {
	return sr._exists
}

// Deleted provides information if the ScRelease has been deleted from the database.
func (sr *ScRelease) Deleted() bool {
	return sr._deleted
}

// Insert inserts the ScRelease to the database.
func (sr *ScRelease) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_release (` +
		`product_ID, version, icon_url, download_url, changelog, package_size, package_type, release_grade, grade_count, release_date` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sr.ProductID, sr.Version, sr.IconURL, sr.DownloadURL, sr.Changelog, sr.PackageSize, sr.PackageType, sr.ReleaseGrade, sr.GradeCount, sr.ReleaseDate)
	res, err := db.Exec(sqlstr, sr.ProductID, sr.Version, sr.IconURL, sr.DownloadURL, sr.Changelog, sr.PackageSize, sr.PackageType, sr.ReleaseGrade, sr.GradeCount, sr.ReleaseDate)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sr.ID = uint(id)
	sr._exists = true

	return nil
}

// Update updates the ScRelease in the database.
func (sr *ScRelease) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE emind_software_center.sc_release SET ` +
		`product_ID = ?, version = ?, icon_url = ?, download_url = ?, changelog = ?, package_size = ?, package_type = ?, release_grade = ?, grade_count = ?, release_date = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, sr.ProductID, sr.Version, sr.IconURL, sr.DownloadURL, sr.Changelog, sr.PackageSize, sr.PackageType, sr.ReleaseGrade, sr.GradeCount, sr.ReleaseDate, sr.ID)
	_, err = db.Exec(sqlstr, sr.ProductID, sr.Version, sr.IconURL, sr.DownloadURL, sr.Changelog, sr.PackageSize, sr.PackageType, sr.ReleaseGrade, sr.GradeCount, sr.ReleaseDate, sr.ID)
	return err
}

// Save saves the ScRelease to the database.
func (sr *ScRelease) Save(db XODB) error {
	if sr.Exists() {
		return sr.Update(db)
	}

	return sr.Insert(db)
}

// Delete deletes the ScRelease from the database.
func (sr *ScRelease) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sr._exists {
		return nil
	}

	// if deleted, bail
	if sr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM emind_software_center.sc_release WHERE ID = ?`

	// run query
	XOLog(sqlstr, sr.ID)
	_, err = db.Exec(sqlstr, sr.ID)
	if err != nil {
		return err
	}

	// set deleted
	sr._deleted = true

	return nil
}

// ScProduct returns the ScProduct associated with the ScRelease's ProductID (product_ID).
//
// Generated from foreign key 'sc_release_ibfk_1'.
func (sr *ScRelease) ScProduct(db XODB) (*ScProduct, error) {
	return ScProductByID(db, sr.ProductID)
}

// ScReleaseByID retrieves a row from 'emind_software_center.sc_release' as a ScRelease.
//
// Generated from index 'sc_release_ID_pkey'.
func ScReleaseByID(db XODB, id uint) (*ScRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, version, icon_url, download_url, changelog, package_size, package_type, release_grade, grade_count, release_date ` +
		`FROM emind_software_center.sc_release ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	sr := ScRelease{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&sr.ID, &sr.ProductID, &sr.Version, &sr.IconURL, &sr.DownloadURL, &sr.Changelog, &sr.PackageSize, &sr.PackageType, &sr.ReleaseGrade, &sr.GradeCount, &sr.ReleaseDate)
	if err != nil {
		return nil, err
	}

	return &sr, nil
}

// ScReleasesByProductID retrieves a row from 'emind_software_center.sc_release' as a ScRelease.
//
// Generated from index 'sc_release_ibfk_1'.
func ScReleasesByProductID(db XODB, productID uint) ([]*ScRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, version, icon_url, download_url, changelog, package_size, package_type, release_grade, grade_count, release_date ` +
		`FROM emind_software_center.sc_release ` +
		`WHERE product_ID = ?`

	// run query
	XOLog(sqlstr, productID)
	q, err := db.Query(sqlstr, productID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScRelease{}
	for q.Next() {
		sr := ScRelease{
			_exists: true,
		}

		// scan
		err = q.Scan(&sr.ID, &sr.ProductID, &sr.Version, &sr.IconURL, &sr.DownloadURL, &sr.Changelog, &sr.PackageSize, &sr.PackageType, &sr.ReleaseGrade, &sr.GradeCount, &sr.ReleaseDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &sr)
	}

	return res, nil
}

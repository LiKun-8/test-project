// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// ScScreenImage represents a row from 'emind_software_center.sc_screen_image'.
type ScScreenImage struct {
	ID        uint   `json:"ID" form:"ID"`                 // ID
	ProductID uint   `json:"product_ID" form:"product_ID"` // product_ID
	ReleaseID uint   `json:"release_ID" form:"release_ID"` // release_ID
	ImageURL  string `json:"image_url" form:"image_url"`   // image_url

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ScScreenImage exists in the database.
func (ssi *ScScreenImage) Exists() bool {
	return ssi._exists
}

// Deleted provides information if the ScScreenImage has been deleted from the database.
func (ssi *ScScreenImage) Deleted() bool {
	return ssi._deleted
}

// Insert inserts the ScScreenImage to the database.
func (ssi *ScScreenImage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ssi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_screen_image (` +
		`product_ID, release_ID, image_url` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ssi.ProductID, ssi.ReleaseID, ssi.ImageURL)
	res, err := db.Exec(sqlstr, ssi.ProductID, ssi.ReleaseID, ssi.ImageURL)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ssi.ID = uint(id)
	ssi._exists = true

	return nil
}

// Update updates the ScScreenImage in the database.
func (ssi *ScScreenImage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ssi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ssi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE emind_software_center.sc_screen_image SET ` +
		`product_ID = ?, release_ID = ?, image_url = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, ssi.ProductID, ssi.ReleaseID, ssi.ImageURL, ssi.ID)
	_, err = db.Exec(sqlstr, ssi.ProductID, ssi.ReleaseID, ssi.ImageURL, ssi.ID)
	return err
}

// Save saves the ScScreenImage to the database.
func (ssi *ScScreenImage) Save(db XODB) error {
	if ssi.Exists() {
		return ssi.Update(db)
	}

	return ssi.Insert(db)
}

// Delete deletes the ScScreenImage from the database.
func (ssi *ScScreenImage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ssi._exists {
		return nil
	}

	// if deleted, bail
	if ssi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM emind_software_center.sc_screen_image WHERE ID = ?`

	// run query
	XOLog(sqlstr, ssi.ID)
	_, err = db.Exec(sqlstr, ssi.ID)
	if err != nil {
		return err
	}

	// set deleted
	ssi._deleted = true

	return nil
}

// ScProduct returns the ScProduct associated with the ScScreenImage's ProductID (product_ID).
//
// Generated from foreign key 'sc_screen_image_ibfk_1'.
func (ssi *ScScreenImage) ScProduct(db XODB) (*ScProduct, error) {
	return ScProductByID(db, ssi.ProductID)
}

// ScRelease returns the ScRelease associated with the ScScreenImage's ReleaseID (release_ID).
//
// Generated from foreign key 'sc_screen_image_ibfk_2'.
func (ssi *ScScreenImage) ScRelease(db XODB) (*ScRelease, error) {
	return ScReleaseByID(db, ssi.ReleaseID)
}

// ScScreenImageByID retrieves a row from 'emind_software_center.sc_screen_image' as a ScScreenImage.
//
// Generated from index 'sc_screen_image_ID_pkey'.
func ScScreenImageByID(db XODB, id uint) (*ScScreenImage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, image_url ` +
		`FROM emind_software_center.sc_screen_image ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	ssi := ScScreenImage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ssi.ID, &ssi.ProductID, &ssi.ReleaseID, &ssi.ImageURL)
	if err != nil {
		return nil, err
	}

	return &ssi, nil
}

// ScScreenImagesByProductID retrieves a row from 'emind_software_center.sc_screen_image' as a ScScreenImage.
//
// Generated from index 'sc_screen_image_ibfk_1'.
func ScScreenImagesByProductID(db XODB, productID uint) ([]*ScScreenImage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, image_url ` +
		`FROM emind_software_center.sc_screen_image ` +
		`WHERE product_ID = ?`

	// run query
	XOLog(sqlstr, productID)
	q, err := db.Query(sqlstr, productID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScScreenImage{}
	for q.Next() {
		ssi := ScScreenImage{
			_exists: true,
		}

		// scan
		err = q.Scan(&ssi.ID, &ssi.ProductID, &ssi.ReleaseID, &ssi.ImageURL)
		if err != nil {
			return nil, err
		}

		res = append(res, &ssi)
	}

	return res, nil
}

// ScScreenImagesByReleaseID retrieves a row from 'emind_software_center.sc_screen_image' as a ScScreenImage.
//
// Generated from index 'sc_screen_image_ibfk_2'.
func ScScreenImagesByReleaseID(db XODB, releaseID uint) ([]*ScScreenImage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, image_url ` +
		`FROM emind_software_center.sc_screen_image ` +
		`WHERE release_ID = ?`

	// run query
	XOLog(sqlstr, releaseID)
	q, err := db.Query(sqlstr, releaseID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScScreenImage{}
	for q.Next() {
		ssi := ScScreenImage{
			_exists: true,
		}

		// scan
		err = q.Scan(&ssi.ID, &ssi.ProductID, &ssi.ReleaseID, &ssi.ImageURL)
		if err != nil {
			return nil, err
		}

		res = append(res, &ssi)
	}

	return res, nil
}

// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// ScCategory represents a row from 'emind_software_center.sc_category'.
type ScCategory struct {
	ID           uint   `json:"ID" form:"ID"`                       // ID
	CategoryName string `json:"category_name" form:"category_name"` // category_name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ScCategory exists in the database.
func (sc *ScCategory) Exists() bool {
	return sc._exists
}

// Deleted provides information if the ScCategory has been deleted from the database.
func (sc *ScCategory) Deleted() bool {
	return sc._deleted
}

// Insert inserts the ScCategory to the database.
func (sc *ScCategory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_category (` +
		`category_name` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, sc.CategoryName)
	res, err := db.Exec(sqlstr, sc.CategoryName)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sc.ID = uint(id)
	sc._exists = true

	return nil
}

// Update updates the ScCategory in the database.
func (sc *ScCategory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE emind_software_center.sc_category SET ` +
		`category_name = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, sc.CategoryName, sc.ID)
	_, err = db.Exec(sqlstr, sc.CategoryName, sc.ID)
	return err
}

// Save saves the ScCategory to the database.
func (sc *ScCategory) Save(db XODB) error {
	if sc.Exists() {
		return sc.Update(db)
	}

	return sc.Insert(db)
}

// Delete deletes the ScCategory from the database.
func (sc *ScCategory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return nil
	}

	// if deleted, bail
	if sc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM emind_software_center.sc_category WHERE ID = ?`

	// run query
	XOLog(sqlstr, sc.ID)
	_, err = db.Exec(sqlstr, sc.ID)
	if err != nil {
		return err
	}

	// set deleted
	sc._deleted = true

	return nil
}

// ScCategoryByID retrieves a row from 'emind_software_center.sc_category' as a ScCategory.
//
// Generated from index 'sc_category_ID_pkey'.
func ScCategoryByID(db XODB, id uint) (*ScCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, category_name ` +
		`FROM emind_software_center.sc_category ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	sc := ScCategory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&sc.ID, &sc.CategoryName)
	if err != nil {
		return nil, err
	}

	return &sc, nil
}

// GetScCategories runs a custom query, returning results as ScCategory.
func GetScCategories(db XODB) ([]*ScCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`* ` +
		`FROM sc_category`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScCategory{}
	for q.Next() {
		sc := ScCategory{}

		// scan
		err = q.Scan(&sc.ID, &sc.CategoryName)
		if err != nil {
			return nil, err
		}

		res = append(res, &sc)
	}

	return res, nil
}

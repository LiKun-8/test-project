// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// ScProduct represents a row from 'emind_software_center.sc_product'.
type ScProduct struct {
	ID                 uint   `json:"ID" form:"ID"`                                   // ID
	CategoryID         uint   `json:"category_ID" form:"category_ID"`                 // category_ID
	ReleaseID          uint   `json:"release_ID" form:"release_ID"`                   // release_ID
	ProductName        string `json:"product_name" form:"product_name"`               // product_name
	VendorName         string `json:"vendor_name" form:"vendor_name"`                 // vendor_name
	IconURL            string `json:"icon_url" form:"icon_url"`                       // icon_url
	URL                string `json:"url" form:"url"`                                 // url
	ProductDescription string `json:"product_description" form:"product_description"` // product_description
	ProductGrade       uint   `json:"product_grade" form:"product_grade"`             // product_grade
	GradeCount         uint   `json:"grade_count" form:"grade_count"`                 // grade_count

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ScProduct exists in the database.
func (sp *ScProduct) Exists() bool {
	return sp._exists
}

// Deleted provides information if the ScProduct has been deleted from the database.
func (sp *ScProduct) Deleted() bool {
	return sp._deleted
}

// Insert inserts the ScProduct to the database.
func (sp *ScProduct) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_product (` +
		`category_ID, release_ID, product_name, vendor_name, icon_url, url, product_description, product_grade, grade_count` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sp.CategoryID, sp.ReleaseID, sp.ProductName, sp.VendorName, sp.IconURL, sp.URL, sp.ProductDescription, sp.ProductGrade, sp.GradeCount)
	res, err := db.Exec(sqlstr, sp.CategoryID, sp.ReleaseID, sp.ProductName, sp.VendorName, sp.IconURL, sp.URL, sp.ProductDescription, sp.ProductGrade, sp.GradeCount)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sp.ID = uint(id)
	sp._exists = true

	return nil
}

// Update updates the ScProduct in the database.
func (sp *ScProduct) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE emind_software_center.sc_product SET ` +
		`category_ID = ?, release_ID = ?, product_name = ?, vendor_name = ?, icon_url = ?, url = ?, product_description = ?, product_grade = ?, grade_count = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, sp.CategoryID, sp.ReleaseID, sp.ProductName, sp.VendorName, sp.IconURL, sp.URL, sp.ProductDescription, sp.ProductGrade, sp.GradeCount, sp.ID)
	_, err = db.Exec(sqlstr, sp.CategoryID, sp.ReleaseID, sp.ProductName, sp.VendorName, sp.IconURL, sp.URL, sp.ProductDescription, sp.ProductGrade, sp.GradeCount, sp.ID)
	return err
}

// Save saves the ScProduct to the database.
func (sp *ScProduct) Save(db XODB) error {
	if sp.Exists() {
		return sp.Update(db)
	}

	return sp.Insert(db)
}

// Delete deletes the ScProduct from the database.
func (sp *ScProduct) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sp._exists {
		return nil
	}

	// if deleted, bail
	if sp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM emind_software_center.sc_product WHERE ID = ?`

	// run query
	XOLog(sqlstr, sp.ID)
	_, err = db.Exec(sqlstr, sp.ID)
	if err != nil {
		return err
	}

	// set deleted
	sp._deleted = true

	return nil
}

// ScCategory returns the ScCategory associated with the ScProduct's CategoryID (category_ID).
//
// Generated from foreign key 'sc_product_ibfk_1'.
func (sp *ScProduct) ScCategory(db XODB) (*ScCategory, error) {
	return ScCategoryByID(db, sp.CategoryID)
}

// ScProductsByCategoryID retrieves a row from 'emind_software_center.sc_product' as a ScProduct.
//
// Generated from index 'category_ID'.
func ScProductsByCategoryID(db XODB, categoryID uint) ([]*ScProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, category_ID, release_ID, product_name, vendor_name, icon_url, url, product_description, product_grade, grade_count ` +
		`FROM emind_software_center.sc_product ` +
		`WHERE category_ID = ?`

	// run query
	XOLog(sqlstr, categoryID)
	q, err := db.Query(sqlstr, categoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScProduct{}
	for q.Next() {
		sp := ScProduct{
			_exists: true,
		}

		// scan
		err = q.Scan(&sp.ID, &sp.CategoryID, &sp.ReleaseID, &sp.ProductName, &sp.VendorName, &sp.IconURL, &sp.URL, &sp.ProductDescription, &sp.ProductGrade, &sp.GradeCount)
		if err != nil {
			return nil, err
		}

		res = append(res, &sp)
	}

	return res, nil
}

// ScProductsByProductName retrieves a row from 'emind_software_center.sc_product' as a ScProduct.
//
// Generated from index 'product_name'.
func ScProductsByProductName(db XODB, productName string) ([]*ScProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, category_ID, release_ID, product_name, vendor_name, icon_url, url, product_description, product_grade, grade_count ` +
		`FROM emind_software_center.sc_product ` +
		`WHERE product_name = ?`

	// run query
	XOLog(sqlstr, productName)
	q, err := db.Query(sqlstr, productName)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScProduct{}
	for q.Next() {
		sp := ScProduct{
			_exists: true,
		}

		// scan
		err = q.Scan(&sp.ID, &sp.CategoryID, &sp.ReleaseID, &sp.ProductName, &sp.VendorName, &sp.IconURL, &sp.URL, &sp.ProductDescription, &sp.ProductGrade, &sp.GradeCount)
		if err != nil {
			return nil, err
		}

		res = append(res, &sp)
	}

	return res, nil
}

// ScProductByID retrieves a row from 'emind_software_center.sc_product' as a ScProduct.
//
// Generated from index 'sc_product_ID_pkey'.
func ScProductByID(db XODB, id uint) (*ScProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, category_ID, release_ID, product_name, vendor_name, icon_url, url, product_description, product_grade, grade_count ` +
		`FROM emind_software_center.sc_product ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	sp := ScProduct{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&sp.ID, &sp.CategoryID, &sp.ReleaseID, &sp.ProductName, &sp.VendorName, &sp.IconURL, &sp.URL, &sp.ProductDescription, &sp.ProductGrade, &sp.GradeCount)
	if err != nil {
		return nil, err
	}

	return &sp, nil
}

// ScProductsByVendorName retrieves a row from 'emind_software_center.sc_product' as a ScProduct.
//
// Generated from index 'vendor_name'.
func ScProductsByVendorName(db XODB, vendorName string) ([]*ScProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, category_ID, release_ID, product_name, vendor_name, icon_url, url, product_description, product_grade, grade_count ` +
		`FROM emind_software_center.sc_product ` +
		`WHERE vendor_name = ?`

	// run query
	XOLog(sqlstr, vendorName)
	q, err := db.Query(sqlstr, vendorName)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScProduct{}
	for q.Next() {
		sp := ScProduct{
			_exists: true,
		}

		// scan
		err = q.Scan(&sp.ID, &sp.CategoryID, &sp.ReleaseID, &sp.ProductName, &sp.VendorName, &sp.IconURL, &sp.URL, &sp.ProductDescription, &sp.ProductGrade, &sp.GradeCount)
		if err != nil {
			return nil, err
		}

		res = append(res, &sp)
	}

	return res, nil
}

// GetScProducts runs a custom query, returning results as ScProduct.
func GetScProducts(db XODB) ([]*ScProduct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`* ` +
		`FROM sc_product`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScProduct{}
	for q.Next() {
		sp := ScProduct{}

		// scan
		err = q.Scan(&sp.ID, &sp.CategoryID, &sp.ReleaseID, &sp.ProductName, &sp.VendorName, &sp.IconURL, &sp.URL, &sp.ProductDescription, &sp.ProductGrade, &sp.GradeCount)
		if err != nil {
			return nil, err
		}

		res = append(res, &sp)
	}

	return res, nil
}

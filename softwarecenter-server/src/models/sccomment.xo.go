// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// ScComment represents a row from 'emind_software_center.sc_comment'.
type ScComment struct {
	ID           uint           `json:"ID" form:"ID"`                       // ID
	ProductID    uint           `json:"product_ID" form:"product_ID"`       // product_ID
	ReleaseID    uint           `json:"release_ID" form:"release_ID"`       // release_ID
	UserID       uint           `json:"user_ID" form:"user_ID"`             // user_ID
	CommentText  string         `json:"comment_text" form:"comment_text"`   // comment_text
	CommentGrade int8           `json:"comment_grade" form:"comment_grade"` // comment_grade
	CommentDate  mysql.NullTime `json:"comment_Date" form:"comment_Date"`   // comment_Date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ScComment exists in the database.
func (sc *ScComment) Exists() bool {
	return sc._exists
}

// Deleted provides information if the ScComment has been deleted from the database.
func (sc *ScComment) Deleted() bool {
	return sc._deleted
}

// Insert inserts the ScComment to the database.
func (sc *ScComment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_comment (` +
		`product_ID, release_ID, user_ID, comment_text, comment_grade, comment_Date` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sc.ProductID, sc.ReleaseID, sc.UserID, sc.CommentText, sc.CommentGrade, sc.CommentDate)
	res, err := db.Exec(sqlstr, sc.ProductID, sc.ReleaseID, sc.UserID, sc.CommentText, sc.CommentGrade, sc.CommentDate)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sc.ID = uint(id)
	sc._exists = true

	return nil
}

// Update updates the ScComment in the database.
func (sc *ScComment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE emind_software_center.sc_comment SET ` +
		`product_ID = ?, release_ID = ?, user_ID = ?, comment_text = ?, comment_grade = ?, comment_Date = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, sc.ProductID, sc.ReleaseID, sc.UserID, sc.CommentText, sc.CommentGrade, sc.CommentDate, sc.ID)
	_, err = db.Exec(sqlstr, sc.ProductID, sc.ReleaseID, sc.UserID, sc.CommentText, sc.CommentGrade, sc.CommentDate, sc.ID)
	return err
}

// Save saves the ScComment to the database.
func (sc *ScComment) Save(db XODB) error {
	if sc.Exists() {
		return sc.Update(db)
	}

	return sc.Insert(db)
}

// Delete deletes the ScComment from the database.
func (sc *ScComment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return nil
	}

	// if deleted, bail
	if sc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM emind_software_center.sc_comment WHERE ID = ?`

	// run query
	XOLog(sqlstr, sc.ID)
	_, err = db.Exec(sqlstr, sc.ID)
	if err != nil {
		return err
	}

	// set deleted
	sc._deleted = true

	return nil
}

// ScProduct returns the ScProduct associated with the ScComment's ProductID (product_ID).
//
// Generated from foreign key 'sc_comment_ibfk_1'.
func (sc *ScComment) ScProduct(db XODB) (*ScProduct, error) {
	return ScProductByID(db, sc.ProductID)
}

// ScRelease returns the ScRelease associated with the ScComment's ReleaseID (release_ID).
//
// Generated from foreign key 'sc_comment_ibfk_2'.
func (sc *ScComment) ScRelease(db XODB) (*ScRelease, error) {
	return ScReleaseByID(db, sc.ReleaseID)
}

// ScUser returns the ScUser associated with the ScComment's UserID (user_ID).
//
// Generated from foreign key 'sc_comment_ibfk_3'.
func (sc *ScComment) ScUser(db XODB) (*ScUser, error) {
	return ScUserByID(db, sc.UserID)
}

// ScCommentByID retrieves a row from 'emind_software_center.sc_comment' as a ScComment.
//
// Generated from index 'sc_comment_ID_pkey'.
func ScCommentByID(db XODB, id uint) (*ScComment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, user_ID, comment_text, comment_grade, comment_Date ` +
		`FROM emind_software_center.sc_comment ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	sc := ScComment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&sc.ID, &sc.ProductID, &sc.ReleaseID, &sc.UserID, &sc.CommentText, &sc.CommentGrade, &sc.CommentDate)
	if err != nil {
		return nil, err
	}

	return &sc, nil
}

// ScCommentsByProductID retrieves a row from 'emind_software_center.sc_comment' as a ScComment.
//
// Generated from index 'sc_comment_ibfk_1'.
func ScCommentsByProductID(db XODB, productID uint) ([]*ScComment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, user_ID, comment_text, comment_grade, comment_Date ` +
		`FROM emind_software_center.sc_comment ` +
		`WHERE product_ID = ?`

	// run query
	XOLog(sqlstr, productID)
	q, err := db.Query(sqlstr, productID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScComment{}
	for q.Next() {
		sc := ScComment{
			_exists: true,
		}

		// scan
		err = q.Scan(&sc.ID, &sc.ProductID, &sc.ReleaseID, &sc.UserID, &sc.CommentText, &sc.CommentGrade, &sc.CommentDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &sc)
	}

	return res, nil
}

// ScCommentsByReleaseID retrieves a row from 'emind_software_center.sc_comment' as a ScComment.
//
// Generated from index 'sc_comment_ibfk_2'.
func ScCommentsByReleaseID(db XODB, releaseID uint) ([]*ScComment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, user_ID, comment_text, comment_grade, comment_Date ` +
		`FROM emind_software_center.sc_comment ` +
		`WHERE release_ID = ?`

	// run query
	XOLog(sqlstr, releaseID)
	q, err := db.Query(sqlstr, releaseID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScComment{}
	for q.Next() {
		sc := ScComment{
			_exists: true,
		}

		// scan
		err = q.Scan(&sc.ID, &sc.ProductID, &sc.ReleaseID, &sc.UserID, &sc.CommentText, &sc.CommentGrade, &sc.CommentDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &sc)
	}

	return res, nil
}

// ScCommentsByUserID retrieves a row from 'emind_software_center.sc_comment' as a ScComment.
//
// Generated from index 'sc_comment_ibfk_3'.
func ScCommentsByUserID(db XODB, userID uint) ([]*ScComment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, product_ID, release_ID, user_ID, comment_text, comment_grade, comment_Date ` +
		`FROM emind_software_center.sc_comment ` +
		`WHERE user_ID = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ScComment{}
	for q.Next() {
		sc := ScComment{
			_exists: true,
		}

		// scan
		err = q.Scan(&sc.ID, &sc.ProductID, &sc.ReleaseID, &sc.UserID, &sc.CommentText, &sc.CommentGrade, &sc.CommentDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &sc)
	}

	return res, nil
}

// Package models contains the types for schema 'emind_software_center'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// ScUser represents a row from 'emind_software_center.sc_user'.
type ScUser struct {
	ID        uint   `json:"ID" form:"ID"`                 // ID
	UserName  string `json:"user_name" form:"user_name"`   // user_name
	AvatarURL string `json:"avatar_url" form:"avatar_url"` // avatar_url
	Mail      string `json:"mail" form:"mail"`             // mail

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ScUser exists in the database.
func (su *ScUser) Exists() bool {
	return su._exists
}

// Deleted provides information if the ScUser has been deleted from the database.
func (su *ScUser) Deleted() bool {
	return su._deleted
}

// Insert inserts the ScUser to the database.
func (su *ScUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if su._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO emind_software_center.sc_user (` +
		`user_name, avatar_url, mail` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, su.UserName, su.AvatarURL, su.Mail)
	res, err := db.Exec(sqlstr, su.UserName, su.AvatarURL, su.Mail)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	su.ID = uint(id)
	su._exists = true

	return nil
}

// Update updates the ScUser in the database.
func (su *ScUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !su._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if su._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE emind_software_center.sc_user SET ` +
		`user_name = ?, avatar_url = ?, mail = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, su.UserName, su.AvatarURL, su.Mail, su.ID)
	_, err = db.Exec(sqlstr, su.UserName, su.AvatarURL, su.Mail, su.ID)
	return err
}

// Save saves the ScUser to the database.
func (su *ScUser) Save(db XODB) error {
	if su.Exists() {
		return su.Update(db)
	}

	return su.Insert(db)
}

// Delete deletes the ScUser from the database.
func (su *ScUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !su._exists {
		return nil
	}

	// if deleted, bail
	if su._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM emind_software_center.sc_user WHERE ID = ?`

	// run query
	XOLog(sqlstr, su.ID)
	_, err = db.Exec(sqlstr, su.ID)
	if err != nil {
		return err
	}

	// set deleted
	su._deleted = true

	return nil
}

// ScUserByID retrieves a row from 'emind_software_center.sc_user' as a ScUser.
//
// Generated from index 'sc_user_ID_pkey'.
func ScUserByID(db XODB, id uint) (*ScUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, user_name, avatar_url, mail ` +
		`FROM emind_software_center.sc_user ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	su := ScUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&su.ID, &su.UserName, &su.AvatarURL, &su.Mail)
	if err != nil {
		return nil, err
	}

	return &su, nil
}
